<% highlight_tab("surveys") %>
<% if @survey.pending? %>
  <div class="breadcrumbs">
    <%= image_tag 'step_1_active.gif' %>
    <%= image_tag 'step_2_inactive.gif' %>
    <%= image_tag 'step_3_inactive.gif' %>
    <%= image_tag 'step_4_inactive.gif' %>
  </div>
<% end %>
<div id="step_container">
  <%=flash_messages%>
  <% form_for(@survey) do |f| %>
    <% if @survey.pending? then %>
      <div class="info_box">
        <%= link_to "Tips for survey sponsorship", home_path('tips'), :target => '_blank' %>
      </div>
    <% end %>
    <%= error_messages_for :survey %>
    <%= f.label :job_title, required("Job title") %>
    <%= f.text_field :job_title, :size => 40 %>
    <%= f.label :description, "Job description" %>
    <%= f.text_area :description, :rows => 4, :cols => 40 %>
    <% if @survey.pending? then %>
      <%= f.label :days_running, "Run length" %>
      <%= f.select :days_running, (3..14).to_a.collect {|i| ["#{i} days", i]} %>
    <% elsif @survey.can_be_extended? then %>
      <p></p>
      <p>Extend deadline by
      <%=f.select :days_to_extend, (Survey::MINIMUM_DAYS_TO_EXTEND..(@survey.maximum_days_to_extend)).to_a, :include_blank => true %> days.</p>
    <% end %>
  <% end %>
  <h3>Questions</h3>
  <ol id="new_questions" class="entity_list">
    <%=render(:partial => "questions/question", :collection => @survey.top_level_questions, :locals => {:level => 0})%>
  </ol>
  <% form_tag '', :id => 'new_question_form' do %>
    <label for='predefined_questions'>Add a Question</label>
    <select id="predefined_questions">
      <option value="">Choose which question...</option>
      <optgroup label="Standard Questions">
        <%= options_from_collection_for_select(PredefinedQuestion.all, 'id', 'name') %>
      </optgroup>
      <optgroup label="&nbsp;"></optgroup>
      <option value="0">Custom question...</option>
    </select>
    <div id='custom_question_form' style='display: none;'>
      <label for='custom_question_text' class='survey_question_label'><%=required('Question Text')%></label>
      <input id='custom_question_text' type='text' size='40' />    
      <div class="error_description" id="custom_question_warning"></div>
      <label for='custom_question_response' class='survey_question_label'>Response Type</label>
      <select id='custom_question_response'><%=options_for_select Question::QUESTION_TYPES.keys %></select>
    </div>
    <div id='follow_up_question' style='<%=@survey.questions.size > 0 ? "" : "display:none;"%>'>
      <label for='follow_up_question_select' class='survey_question_label'>Add as a follow-up to</label>
      <select id='follow_up_question_select'>
        <option value=''>Nothing</option>
        <%= options_from_collection_for_select(@survey.questions,'id','text')%>
    </select>
    </div>
    <div>
      <input id="question_submit" class="question_submit" type="submit" value="Add" />
      <%= image_tag 'load_indicator.gif', :class => 'load_indicator', :id => 'load_indicator', :style => 'display:none;' %>
    </div>
    <div class="submit_row">
      <% if @survey.pending? %>
        <input id="form_submit" type="submit" value="Next &ndash; Create Invitation List" class="next" />
	      <%= link_to "Cancel", { :action => "destroy", :id => @survey.id }, :confirm => "You are about to delete this survey. Are you sure?", :method => :delete %>
      <%else%>
        <%= button_to "Next &ndash; Preview Survey", preview_survey_questions_path(@survey), :class => "next", :method => :get, :id => "invitation_form_submit" %>
	      <input type="button" onclick="window.location='<%= survey_path(@survey) %>'" value="Back" class="previous" />
	    <%end%>
    </div>
  <% end %>
</div>
<br clear="both" />
<script type="text/javascript">

function initializeObservers() {
  var set = new EditableQuestionSet('new_questions', $('new_question_form'), <%= @survey.id %>);
/*
  //hook up observers for each question's actions
  <% @survey.questions.each do |question| %>
    observeQuestion('<%= question.id %>');
  <% end %>
  
  //hook up observers for the 'add question' form
  $('predefined_questions').observe('change', selectQuestion);
  $('question_submit').observe('click', addQuestion);
  callFunctionOnEnterForm($('custom_question_form'), addQuestion);
    
  //Reset the select box
  $('predefined_questions').clear();  
  $('follow_up_question_select').clear();
 */ 
}

/**
 * This will ensure proper zebra-striping for the questions list
 */
function restripeQuestions() {

  var i = 0;
  
  $$('ol#new_questions li').each( function(question) {  

    if (i % 2 == 0) {
      question.className = 'even';
    } else {
      question.className = 'odd';
    }
    i++;
    
  });
  
}

/**
 * Action taken when the user selects from the questions drop-down
 * This will hide or expose the custom question form
 */
function selectQuestion() {


}

/**
 * This will handle the action when a user selects 'add' in the question form
 * This will add a custom or predefined question, depending on what was selected
 */
function addQuestion(e) {
   
}

/** 
 * This will handle the response of question_controller.create/update, which could be n number of list items.
 * This will add the question items to the DOM, and initialize the observers
 */
function insertQuestions(questions, parent_question_id, replacing_question_id) {

    //Determine the IDs of the questions we have added
    question_ids = [];
    questions.match(/id\='question_\d+'/g).each( function(question) {
      question_ids.push(question.match(/(\d+)/).first());
    });

    var isInsertion = false;
    if (replacing_question_id) {
      Element.replace($('question_'+replacing_question_id), questions);
    } else {
      isInsertion = true;
      if(parent_question_id) {    
        $('question_children_'+parent_question_id).insert(questions, { 'position':'bottom' });
      } else {
        $('new_questions').insert(questions, { 'position':'bottom' });
      }
    }
    
    restripeQuestions();

    updateParentCandidateQuestions();
         
    question_ids.each( function(question_id) {
      if(isInsertion) {
        $('question_'+question_id).hide();
        $('question_'+question_id).appear({'duration': 0.5});
      }
      observeQuestion(question_id);
    });
         
};

/**
 * This will update the list of follow-up questions, hiding the box if necessary. 
 */
function updateParentCandidateQuestions() {
  //Remove any existing options
  var selectBox = $('follow_up_question_select');
  for(i = selectBox.length - 1; i > 0; i--) {
    selectBox.remove(i);
  }

  $$('ol#new_questions li').each(function(question) {  
    var option = document.createElement("OPTION");
    option.value = question.id.match(/(\d+)/).first();
    option.text = $('question_display_text_' + option.value).innerHTML;
    selectBox.options.add(option);
  });

  var followUpQuestionsDiv = $('follow_up_question');
  if(selectBox.childNodes.length > 0) {
    followUpQuestionsDiv.show();
  } 
  else {
    followUpQuestionsDiv.hide();
  }
  
}

</script>

<% content_for :initialize_js, "initializeObservers();"%>

