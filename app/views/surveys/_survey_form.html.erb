<% title "New Survey" %>
<% highlight_tab("surveys") %>
<div class="breadcrumbs">
  <%= image_tag 'step_1_active.gif' %>
  <%= image_tag 'step_2_inactive.gif' %>
  <%= image_tag 'step_3_inactive.gif' %>
  <%= image_tag 'step_4_inactive.gif' %>
</div>
<div id="step_container">
  <%=flash_messages%>
  <% form_for @survey, :url => surveys_path, :html => {:method => :post} do |f| %>
    <%= error_messages_for :survey %>
    <%= f.label :job_title, required("Job title") %>
    <%= f.text_field :job_title, :size => 40 %>
    <%= f.label :description, "Job description" %>
    <%= f.text_area :description, :rows => 4, :cols => 40 %>
    <%= f.label :days_running, "Run length" %>
    <%= f.select :days_running, (3..14).to_a.collect {|i| ["#{i} days", i]} %>
    <h3>Questions</h3>
    <ol id="new_questions" class="entity_list">
      <%=render(:partial => "questions/question", :collection => @survey.top_level_questions, :locals => {:level => 0, :include_children => true})%>
    </ol>
    <label for='predefined_questions'>Add a Question</label>
    <select id="predefined_questions">
      <option value="" selected="selected">Select a question</option>
      <option value="0">Custom question</option>
      <%= options_from_collection_for_select(PredefinedQuestion.all, 'id', 'name') %>
    </select>
    <div id='custom_question_form' style='display: none;'>
      <label for='custom_question_text' class='survey_question_label'><%=required('Question Text')%></label>
      <input id='custom_question_text' type='text' size='30' />    
      <div class="error_description" id="custom_question_warning"></div>
      <label for='custom_question_response' class='survey_question_label'>Response Type</label>
      <select id='custom_question_response'><%=options_for_select Question::CUSTOM_QUESTION_TYPES.keys %></select>
    </div>
    <div id='follow_up_question' style='<%=@survey.questions.can_be_parent.size > 0 ? "" : "display:none;"%>'>
      <label for='follow_up_question_select' class='survey_question_label'>Add as a follow-up to</label>
      <select id='follow_up_question_select'>
        <option value=''>Select another question</option>
        <%= options_from_collection_for_select(@survey.questions.can_be_parent,'id','text')%>
    </select>
    </div>
    <input id="question_submit" class="question_submit" type="submit" value="Add" />
    <div class="submit_row">
      <input id="form_submit" type="submit" value="Next &ndash; Create Invitation List" class="next" />
      <% if @survey.aasm_state == 'pending'%>
	    <%= link_to "Cancel", { :action => "destroy", :id => @survey.id },
	            :confirm => "This will delete the survey and any progress you have made. Are you sure?",
				:method => :delete %>
	  <%else%>
	    <input type="button" onclick="window.location='<%= surveys_path %>'" value="Cancel" class="previous" />
	  <%end%>
    </div>
  <% end %>
</div>
<br clear="both" />
<script type="text/javascript">

function initializeObservers() {

  //hook up observers for each question's actions
  <% @survey.questions.each do |question| %>
    observeQuestion('<%= question.id %>');
  <% end %>
  
  //hook up observers for the 'add question' form
  $('predefined_questions').observe('change', selectQuestion);
  $('question_submit').observe('click', addQuestion);
  callFunctionOnEnterForm($('custom_question_form'), addQuestion);
    
  //Reset the select box
  $('predefined_questions').clear();  
  $('follow_up_question_select').clear();
  
}

/**
 * Hooks up observers for all question actions
 */
function observeQuestion(index) {
  $('question_cancel_'+index).observe('click', cancelEditQuestion.curry(index));
  $('question_edit_'+index).observe('click', editQuestion.curry(index));
  $('question_delete_'+index).observe('click', deleteQuestion.curry(index));
  $('question_up_'+index).observe('click', moveQuestion.curry(index,'higher'));
  $('question_down_'+index).observe('click', moveQuestion.curry(index, 'lower'));
  $('question_save_'+index).observe('click', saveQuestion.curry(index));
  callFunctionOnEnterForm($('question_edit_display_'+index), saveQuestion.curry(index));
  
}

/**
 * This will ensure proper zebra-striping for the questions list
 */
function restripeQuestions() {

  var i = 0;
  
  $$('ol#new_questions li').each( function(question) {  

    if (i % 2 == 0) {
      question.className = 'even';
    } else {
      question.className = 'odd';
    }
    i++;
    
  });
  
}

/**
 * Action taken when the user selects from the questions drop-down
 * This will hide or expose the custom question form
 */
function selectQuestion() {

  //The user selected custom question, show the form
  if($F('predefined_questions') == "0") {
    if (!$('custom_question_form').visible()) {
      $('custom_question_form').blindDown({'duration': 0.5});
    }
  } 
  //The user selected a non-custom question, hide the form
  else {
    if ($('custom_question_form').visible()) {
      $('custom_question_form').blindUp({'duration': 0.5});
      $('custom_question_warning').update('');
    }
  }

}

/**
 * This will handle the action when a user selects 'add' in the question form
 * This will add a custom or predefined question, depending on what was selected
 */
function addQuestion(e) {
  if(e) {
    e.stop();
  }

  var selectedQuestion = $F('predefined_questions');
  var selectedParentQuestion = $F('follow_up_question_select');
  
  //The user selected custom question
  if(selectedQuestion == "0") {
  
    // don't add the question if the user did not enter any text
    if($F('custom_question_text') == '') {
      $('custom_question_warning').update('Question text is required');
      return false;
    }
    
    new Ajax.Request('<%= survey_questions_path(@survey) %>', {
      'method': 'post',
      'parameters': {'question[text]' : $F('custom_question_text'), 'question[custom_question_type]' : $F('custom_question_response'), 'question[parent_question_id]' : selectedParentQuestion},
      'onSuccess' : function(transport) {
        insertQuestions(transport.responseText, selectedParentQuestion);
      }
    }); 
    
    $('custom_question_text').clear();
    $('custom_question_response').clear();
    $('custom_question_warning').update('');
    $('custom_question_form').blindUp({'duration': 0.5});
    
  } 
  //The user selected a predefined question
  else if (selectedQuestion != '') {
    
    new Ajax.Request('<%= survey_questions_path(@survey) %>', {
      'method': 'post',
      'parameters': {'predefined_question_id' : selectedQuestion, 'parent_question_id' : selectedParentQuestion},
      'onSuccess' : function(transport) {
        insertQuestions(transport.responseText, selectedParentQuestion);
      }
    });   
      
  }  
    
  //Reset the select box
  $('predefined_questions').clear();
  $('follow_up_question_select').clear();
    
}

/** 
 * This will handle the response of question_controller.create, which could be n number of list items.
 * This will add the question items to the DOM, and initialize the observers
 */
function insertQuestions(questions, parent_question_id) {

    //Determine the IDs of the questions we have added
    question_ids = [];
    questions.match(/id\='question_\d+'/g).each( function(question) {
      question_ids.push(question.match(/(\d+)/).first());
    });

    if(parent_question_id) {    
      $('question_children_'+parent_question_id).insert(questions, { 'position':'bottom' });
    }
    else {
      $('new_questions').insert(questions, { 'position':'bottom' });
    }
    
    question_ids.each( function(question_id) {
      $('question_'+question_id).hide();
      $('question_'+question_id).appear({'duration': 0.5});
      observeQuestion(question_id);
    });
    
    restripeQuestions();
    
    updateParentCandidateQuestions();
          
};

/**
 * Hides the question display and brings up the question edit form
 */
function editQuestion(index,e) {
  e.stop();

  $('question_display_'+index).blindUp({'duration': 0.25});
  $('question_edit_display_'+index).blindDown({'duration': 0.25});
  
}

/**
 * Hides the edit form, sends the update request to the server, handles the response from questions_controller.update
 */
function saveQuestion(index,e) {
  if(e) {
    e.stop();
  }
  
  new Ajax.Request('<%= survey_questions_path(@survey) %>/'+index, {
    'method': 'put',
    'parameters': {'question[text]' : $F('question_'+index+'_text'), 'question[custom_question_type]' : $F('question_'+index+'_custom_question_type'), 'question[required]' : $('question_'+index+'_required').checked},
    'onSuccess' : function(transport) {
      Element.replace($('question_'+index), transport.responseText);
      observeQuestion(index);  
      restripeQuestions();
      updateParentCandidateQuestions();
    }
  });

  $('question_edit_display_'+index).blindUp({'duration': 0.25});    
  $('question_display_'+index).blindDown({'duration': 0.25});
  
}

/**
 * Hides the edit form and brings up the question display
 */
function cancelEditQuestion(index,e) {
  e.stop();
 
  $('question_edit_display_'+index).blindUp({'duration': 0.25});   
  $('question_display_'+index).blindDown({'duration': 0.25});
  
}

/**
 * Removed the question from the DOM, as well as sends the destroy request to the server
 */
function deleteQuestion(index,e) {
  e.stop();
  var question = $('question_'+index);
  var question_children = $('question_children_'+index);
  
  new Effect.Parallel([
    new Effect.Fade(question),
    new Effect.Fade(question_children),
  ],
  {'duration': 0.5,
   'afterFinish': function() {
    question.remove();
    question_children.remove();
    restripeQuestions();
   }
  }
  );
  
  new Ajax.Request('<%= survey_questions_path(@survey) %>/' + index, {
    'method': 'delete',
    'onSuccess': updateParentCandidateQuestions
  });  
    
}

/**
 * Repsitions a question either 'higher' or 'lower' depending on the input, send the move request to the server
 */
function moveQuestion(index,direction,e) {
  e.stop();
  var question = $('question_'+index);
  var moveCompleted = false;
  
  if(direction == 'higher' && question.previousSiblings().length > 1) {
    moveCompleted = true;
    
    var sibling = question.previousSiblings()[1];
    var sibling_children = question.previousSiblings()[0];
    var question_children = question.nextSiblings()[0];
    
    question.remove();
    question_children.remove();

    new Insertion.Before(sibling, question);
    new Insertion.After(question, question_children);
    
  }
  else if (direction == 'lower' && question.nextSiblings().length > 2) {
    moveCompleted = true;
    
    var sibling = question.nextSiblings()[1];
    var sibling_children = question.nextSiblings()[2];
    var question_children = question.nextSiblings()[0];
    
    question.remove();
    question_children.remove();

    new Insertion.After(sibling_children, question);   
    new Insertion.After(question, question_children);
     
  }
  
  if(moveCompleted) {
  
    restripeQuestions(); 
    
    new Ajax.Request('<%= survey_questions_path(@survey) %>/' + index + '/move', {
      'method': 'put',
      'parameters': {'direction': direction}
    }); 
       
  }
  
}

/**
 * This will check the survey for questions that can have follow-up questions.
 * If questions are allowed to have follow-ups, a select box will be made visible,
 * with the parent candidates as options.
 */
function updateParentCandidateQuestions() {

  //Retrieve the parent candidate questions from the server
  new Ajax.Request('<%= survey_questions_path(@survey) %>/parent_candidates', {
    'method': 'get',
    'onSuccess' : function(transport) {
    
      var questions = transport.responseText.evalJSON();
      var followUpQuestionsDiv = $('follow_up_question');
      
      //Add all of the parent candidates as follow-up options
      if(questions.length > 0) {
        var selectBox = $('follow_up_question_select');
        
        //Remove any existing options
        for(i = selectBox.length - 1; i > 0; i--) {
          selectBox.remove(i);
        }
        
        questions.each( function(question) {          
          selectBox.options.add(new Element('option', { 'value':question.id }).update(question.text));          
        });
      
        if(!followUpQuestionsDiv.visible()) {
          followUpQuestionsDiv.appear({'duration': 0.5});
        }
      } 
      else {
        if(followUpQuestionsDiv.visible()) {
          followUpQuestionsDiv.fade({'duration': 0.5});
        }      
      }
    }
  });
  
}

</script>

<% content_for :initialize_js, "initializeObservers();"%>

