<% title "New Survey" %>
<% breadcrumbs(link_to("Surveys",surveys_path)) %>
<% highlight_tab("surveys") %>
<h2>New Survey</h2>
<%=flash_messages%>
<% form_for :survey, @survey, :url => surveys_path, :html => {:id => 'new_survey', :onSubmit => 'return addCustomQuestionsToResponse();'} do |f| %>
  <%=error_messages_for :survey %>
  <%=f.label :job_title%>
	<%=f.text_field :job_title, :size => 40 %>
  <%=f.label :job_description%>
  <%=f.text_area :description, :rows => 4, :cols => 40 %>
	<%=f.label :days_running, "Run length" %>
	<%=f.select :days_running, (3..7).to_a.collect {|i| ["#{i} days", i]} %>
	<h3>Standard questions</h3>
	<div id="standard_questions">
		<ul>
		  <% @predefined_questions.each do |question| %>
		    <% fields_for "predefined_question", :index => question.id do |question_form| %>
		      <li><%=question_form.check_box :included%>
						<span class="name"><%=question.name%></span>
					</li>
		    <% end %>
		  <% end %>
		</ul>
	</div>
	<h3>Custom questions</h4>
	<div id="custom_questions">
		<div class="box_container">
			<div class="box">
				<label>Question Text</label>
				<input type="text" size="30" id="question_text" />
			</div>
			<div class="box">
				<label>Response Type</label>
				<select id="response_type">
					<option>Free response</option>
					<option>Numeric response</option>
					<option>Yes/No</option>
					<option>Agreement Scale</option>
				</select>
			</div>
			<div class="box">
				<label>&nbsp;</label>
				<input type="button" value="Add Question" id="question_submit" onClick="createQuestion();">
			</div>
		</div>
		<p>
		<ul id="custom_question_list">
		</ul>
		</p>
	</div>
	<br clear="both" />
  <% if !@network.nil? then %>
    <%=hidden_field_tag(:invite_network, @network.id ) %>
  <% end %>
  <p><input type="submit" value="Create Survey" /> or <%=link_to "Cancel", surveys_path %></p>
<% end %>
<script type="text/javascript">

/* This is a hash of questions the user has selected */
var included_questions;
/* This is a hash of questions the user has created */
var all_questions;
/* This sequence is used to give each question a unique identifier */
var question_sequence;

function initialize() {
  included_questions = $H();
  all_questions = $H();
  question_sequence = 0;
}

/*
 * This will write the custom questions as a hash in the response
 */
function addCustomQuestionsToResponse() {
  new_survey_form = $('new_survey');
  custom_questions = new Element('input', 
    {type: 'hidden', 
    value : included_questions.values().toJSON(), 
    id: 'custom_questions_array', 
    name: 'custom_questions_array'});
  new_survey_form.insert(custom_questions);
  return validateForm();
}

/*
 * Validating the form will prevent the user from inputting an invalid form and losing any custom questions
 */
function validateForm() {
  if ($F('survey_job_title') == '') {
    alert('Job title may not be blank');
    return false;
  }
  return true;
}

/*
 * If the question is already included in the hash of included questions, remove it.
 * If the question is not included in the hash of included questions, add it.
 */
function addOrRemoveQuestion(question_id) {
  if (included_questions.keys().indexOf(question_id+'') < 0) {
    included_questions.set(question_id,all_questions.get(question_id));
  } else {
    included_questions.unset(question_id);
  }
};

/*
 * This will validate the question, create a question object, store the question object, and render it in the DOM.
 */
function createQuestion() {

  var Question = Class.create({
    initialize: function(text,question_type) {
      this.text = text;
      this.question_type = question_type;
      this.question_id = question_sequence++;
    },  
    toJSON: function() {
      return $H({'text' : this.text, 'question_type' : this.question_type}).toJSON();
    },
    toHTML: function() {
      var question_id = this.question_id;
      question_item = new Element('li', {id:"custom_question_" + this.question_id});
			checkbox = new Element('input', {type: 'checkbox', checked : 'yes'});
			checkbox.onclick = function() {
				addOrRemoveQuestion(question_id);
			}
			question_item.update(checkbox);
			question_item.insert("<span class=\"name\">"+this.text+"</span> <span class=\"description\">"+this.question_type+"</span>");
			return question_item;
    }
  });

  var text = $F('question_text');
  var type = $F('response_type');
  var custom_question_list = $('custom_question_list');
  
    if (text == '') {
      return alert('Question text may not be blank');
    }
      
  var question = new Question(text,type);
  all_questions.set(question.question_id,question);
  included_questions.set(question.question_id,question);
  
  new Insertion.Top(custom_question_list,question.toHTML());
  $('question_text').clear();
}


</script>

<% content_for :initialize_js, "initialize();"%>
